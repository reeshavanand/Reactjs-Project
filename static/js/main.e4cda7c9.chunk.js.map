{"version":3,"sources":["Navbar.js","BlogList.js","useFetch.js","Home.js","NewBlog.js","BlogDetails.js","NotFound.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","className","to","BlogList","blogs","title","map","blog","id","author","useFetch","url","useState","data","setData","isPending","setIsPending","error","setError","useEffect","abortcont","AbortController","setTimeout","fetch","signal","then","res","ok","Error","json","catch","err","name","console","log","message","abort","Home","blogg","NewBlog","setTitle","body","setBody","setAuthor","history","useHistory","onSubmit","e","preventDefault","method","headers","JSON","stringify","push","type","required","value","onChange","target","disabled","BlogDetails","useParams","onClick","NotFound","App","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0MAgBeA,EAbA,WACX,OACI,sBAAKC,UAAU,SAAf,UACI,4DACA,sBAAKA,UAAU,QAAf,UACI,cAAC,IAAD,CAAMC,GAAK,IAAX,kBACA,cAAC,IAAD,CAAMA,GAAK,WAAX,6BCaDC,EAnBE,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,MAEtB,OACI,sBAAKJ,UAAU,YAAf,UACI,mCAAMI,EAAN,OACCD,EAAME,KAAI,SAACC,GAAD,OACT,qBAAKN,UAAU,eAAf,SAEG,eAAC,IAAD,CAAMC,GAAE,iBAAYK,EAAKC,IAAzB,UAEA,6BAAKD,EAAKF,QACV,4CAAeE,EAAKE,cALYF,EAAKC,W,OC8BvCE,EArCE,SAACC,GACd,MAAwBC,mBAAS,MAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAkCF,oBAAS,GAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAA0BJ,mBAAS,MAAnC,mBAAOK,EAAP,KAAcC,EAAd,KA+BA,OA7BAC,qBAAU,WACP,IAAMC,EAAY,IAAIC,gBAyBxB,OAxBGC,YAAW,WACXC,MAAMZ,EAAI,CAACa,OAAQJ,EAAUI,SAC5BC,MAAK,SAAAC,GACH,IAAIA,EAAIC,GACL,MAAMC,MAAM,8CAEf,OAAOF,EAAIG,UAEbJ,MAAK,SAAAZ,GACHC,EAAQD,GACRG,GAAa,GACbE,EAAS,SAGXY,OAAM,SAAAC,GACa,eAAbA,EAAIC,KACLC,QAAQC,IAAI,kBAEflB,GAAa,GACbE,EAASa,EAAII,eAGhB,KAEI,kBAAMf,EAAUgB,WACpB,CAACzB,IAEE,CAACE,OAAME,YAAWE,UCnBdoB,EAbF,WACV,MAAyC3B,EAAS,+BAArC4B,EAAb,EAAQzB,KAAYE,EAApB,EAAoBA,UAAWE,EAA/B,EAA+BA,MAC9B,OACI,sBAAKhB,UAAU,OAAf,UAEKgB,GAAS,8BAAMA,IACfF,GAAa,6CACbuB,GAAS,cAAC,EAAD,CAAUlC,MAASkC,EAAOjC,MAAS,4B,OCsD1CkC,EA7DC,WACZ,MAA0B3B,mBAAS,IAAnC,mBAAOP,EAAP,KAAcmC,EAAd,KACA,EAAwB5B,mBAAS,IAAjC,mBAAO6B,EAAP,KAAaC,EAAb,KACA,EAA4B9B,mBAAS,IAArC,mBAAOH,EAAP,KAAekC,EAAf,KACA,EAAkC/B,oBAAS,GAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACM4B,EAAUC,cAmBhB,OACI,sBAAK5C,UAAU,SAAf,UACI,8CACA,uBAAM6C,SApBO,SAACC,GAClBA,EAAEC,iBACF,IAAMzC,EAAO,CAACF,QAAOoC,OAAMhC,UAC3BO,GAAa,GAEbO,MAAM,8BAA8B,CAChC0B,OAAQ,OACRC,QAAQ,CAAC,eAAe,oBACxBT,KAAKU,KAAKC,UAAU7C,KACrBkB,MAAK,WACJQ,QAAQC,IAAI,kBACZlB,GAAa,GAEb4B,EAAQS,KAAK,SAOb,UACI,gDACA,uBACEC,KAAK,OACLC,UAAQ,EACRC,MAASnD,EACToD,SAAU,SAACV,GAAD,OAAMP,EAASO,EAAEW,OAAOF,UAElC,+CACA,0BACAD,UAAQ,EACRC,MAASf,EACTgB,SAAU,SAACV,GAAD,OAAML,EAAQK,EAAEW,OAAOF,UAEjC,iDACA,yBACAA,MAAO/C,EACPgD,SAAU,SAACV,GAAD,OAAOJ,EAAUI,EAAEW,OAAOF,QAFpC,UAGI,wBAAQA,MAAM,QAAd,mBACA,wBAAQA,MAAM,QAAd,mBACA,wBAAQA,MAAM,UAAd,qBACA,wBAAQA,MAAM,QAAd,mBACA,wBAAQA,MAAM,QAAd,uBAEFzC,GAAa,8CACdA,GAAa,wBAAQ4C,UAAQ,EAAhB,mCCtBjBC,EA9BK,WAEhB,IAAOpD,EAAMqD,cAANrD,GACP,EAAwCE,EAAS,+BAAiCF,GAAtE8B,EAAZ,EAAOzB,KAAYE,EAAnB,EAAmBA,UAAWE,EAA9B,EAA8BA,MACxB2B,EAAUC,cAShB,OACI,sBAAK5C,UAAU,eAAf,UACKc,GAAa,6CACbE,GAAS,8BAAMA,IACfqB,GACG,oCACI,6BAAKA,EAAMjC,QACX,4CAAeiC,EAAM7B,UACrB,8BAAM6B,EAAMG,OACZ,wBAAQqB,QAhBH,WACjBvC,MAAM,+BAAiCe,EAAM9B,GAAG,CAC5CyC,OAAO,WACRxB,MAAK,WACJmB,EAAQS,KAAK,SAYL,2BCdLU,EAVE,WACb,OACI,sBAAK9D,UAAU,YAAf,UACI,uCACA,0DACA,cAAC,IAAD,CAAMC,GAAK,IAAX,2CC6BG8D,MA3Bf,WAEE,OACI,cAAC,IAAD,UACE,sBAAK/D,UAAU,MAAf,UACE,cAAC,EAAD,IACE,qBAAKA,UAAU,UAAf,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOgE,OAAK,EAACC,KAAK,IAAlB,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOA,KAAK,WAAZ,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOA,KAAK,aAAZ,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOA,KAAK,IAAZ,SACE,cAAC,EAAD,iBCfHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB5C,MAAK,YAAkD,IAA/C6C,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.e4cda7c9.chunk.js","sourcesContent":["import {Link} from 'react-router-dom';\r\n\r\n\r\nconst Navbar = () => {\r\n    return ( \r\n        <nav className=\"navbar\">\r\n            <h1>Mind Blogging üòè</h1>\r\n            <div className=\"links\">\r\n                <Link to = \"/\">Home</Link>\r\n                <Link to = \"/NewBlog\">New Blog</Link>\r\n            </div>\r\n        </nav>\r\n    \r\n     );\r\n}\r\n \r\nexport default Navbar;","import { Link } from 'react-router-dom';\r\n\r\n\r\nconst BlogList = ({blogs, title,}) => {\r\n    \r\n    return ( \r\n        <div className=\"blog-list\">\r\n            <h2> {title} </h2>\r\n            {blogs.map((blog) => (\r\n              <div className=\"blog-preview\" key={blog.id}>\r\n                 \r\n                 <Link to={`/blogs/${blog.id}`}>\r\n\r\n                 <h2>{blog.title}</h2>\r\n                 <p>Written by {blog.author}</p>\r\n                 </Link>\r\n              </div>\r\n           ))}\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default BlogList ;","import { useState, useEffect } from \"react\";\r\n\r\nconst useFetch = (url) => {\r\n    const [data, setData] = useState(null);\r\n    const [isPending, setIsPending] = useState(true);\r\n    const [error, setError] = useState(null);\r\n\r\n    useEffect(()=>{\r\n       const abortcont = new AbortController();\r\n        setTimeout(() =>{\r\n        fetch(url,{signal: abortcont.signal})\r\n        .then(res => {\r\n           if(!res.ok){\r\n              throw Error('Could not fetch the data for that resource');\r\n           }\r\n           return res.json(); \r\n        })\r\n        .then(data => {\r\n           setData(data);\r\n           setIsPending(false);\r\n           setError(null);\r\n  \r\n        })\r\n        .catch(err =>{\r\n           if (err.name === 'AbortError'){\r\n              console.log('fetch aborted');\r\n           } else{\r\n           setIsPending(false);\r\n           setError(err.message);\r\n           }\r\n        })\r\n     }, 100);\r\n\r\n     return () => abortcont.abort();\r\n     }, [url]);\r\n\r\n    return {data, isPending, error}\r\n}\r\n\r\nexport default useFetch;","\r\nimport BlogList from \"./BlogList\";\r\nimport useFetch from \"./useFetch\";\r\n\r\nconst Home = () => {\r\n   const { data:blogg, isPending, error } = useFetch('http://localhost:8000/blogs');\r\n    return ( \r\n        <div className=\"home\">\r\n\r\n           { error && <div>{error}</div> }\r\n           { isPending && <div>Loading...</div> }\r\n           { blogg && <BlogList blogs = {blogg} title = {\" All Insight Blogs!\"} /> }\r\n           \r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Home;\r\n\r\n","\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useState } from \"react\";\r\n\r\nconst NewBlog = () => {\r\n    const [title, setTitle] = useState('');\r\n    const [body, setBody] = useState('');\r\n    const [author, setAuthor] = useState('');\r\n    const [isPending, setIsPending] = useState(false);\r\n    const history = useHistory();\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        const blog = {title, body, author};\r\n        setIsPending(true);\r\n       \r\n        fetch('http://localhost:8000/blogs',{\r\n            method: 'POST',\r\n            headers:{\"Content-Type\":\"application/json\"},\r\n            body:JSON.stringify(blog)\r\n        }).then(()=>{\r\n            console.log('new blog added');\r\n            setIsPending(false);\r\n            // history.go(1);\r\n            history.push('/');\r\n        })\r\n\r\n    }\r\n    return (  \r\n        <div className=\"create\">\r\n            <h2>Add New Blog</h2>\r\n            <form onSubmit={handleSubmit}>\r\n                <label>Blog Title:</label>\r\n                <input\r\n                  type=\"text\"\r\n                  required\r\n                  value = {title}\r\n                  onChange={(e)=> setTitle(e.target.value)}\r\n                  />\r\n                  <label>Blog Body:</label>\r\n                  <textarea\r\n                  required\r\n                  value = {body}\r\n                  onChange={(e)=> setBody(e.target.value)}\r\n                  ></textarea>\r\n                  <label>Blog Author:</label>\r\n                  <select\r\n                  value={author}\r\n                  onChange={(e) => setAuthor(e.target.value)}>\r\n                      <option value=\"mario\">mario</option>\r\n                      <option value=\"yoshi\">yoshi</option>\r\n                      <option value=\"reeshav\">reeshav</option>\r\n                      <option value=\"anand\">anand</option>\r\n                      <option value=\"shanu\">shanu</option>\r\n                  </select>\r\n                  {!isPending && <button>Add Blog</button>}\r\n                  {isPending && <button disabled>Adding Blog...</button>}\r\n                  {/* <p>{title}</p>\r\n                  <p>{body}</p>\r\n                  <p>{author}</p> */}\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default NewBlog;","import { useParams,useHistory } from \"react-router-dom\";\r\nimport useFetch from \"./useFetch\";\r\n\r\n\r\nconst BlogDetails = () => {\r\n\r\n    const {id} = useParams()\r\n    const {data:blogg, isPending, error } = useFetch('http://localhost:8000/blogs/' + id);\r\n    const history = useHistory();\r\n\r\n    const handleDelete = () =>{\r\n        fetch('http://localhost:8000/blogs/' + blogg.id,{\r\n            method:'DELETE'\r\n        }).then(() =>{\r\n            history.push('/');\r\n        })\r\n    }\r\n    return ( \r\n        <div className=\"blog-details\">\r\n            {isPending && <div>Loading...</div>}\r\n            {error && <div>{error}</div>}\r\n            {blogg && (\r\n                <article>\r\n                    <h2>{blogg.title}</h2>\r\n                    <p>Written by {blogg.author}</p>\r\n                    <div>{blogg.body}</div>\r\n                    <button onClick={handleDelete}>Delete</button>\r\n                </article>\r\n            )}\r\n           \r\n        </div>\r\n     );\r\n}\r\n \r\nexport default BlogDetails;","import { Link } from \"react-router-dom\";\r\n\r\nconst NotFound = () => {\r\n    return (\r\n        <div className=\"not-found\">\r\n            <h1>Sorry</h1>\r\n            <p>That page cannot be found</p>\r\n            <Link to = \"/\">Return to the homepage...</Link>\r\n        </div>\r\n      );\r\n}\r\n \r\nexport default NotFound;","\nimport Navbar from './Navbar';\nimport Home from './Home';\nimport {BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport NewBlog from './NewBlog';\nimport BlogDetails from './BlogDetails';\nimport NotFound from './NotFound';\n\n\nfunction App() {\n  \n  return (\n      <Router>\n        <div className=\"App\">\n          <Navbar />\n            <div className=\"content\">\n              <Switch>\n                <Route exact path=\"/\">\n                  <Home />\n                </Route>\n                <Route path=\"/NewBlog\">\n                  <NewBlog />\n                </Route>\n                <Route path=\"/blogs/:id\">\n                  <BlogDetails />\n                </Route>\n                <Route path=\"*\">\n                  <NotFound />\n                </Route>\n              </Switch>\n            </div>\n          </div>\n        </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}